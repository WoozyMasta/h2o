#compdef minimap2

args=(
    '-k[Minimizer k-mer length \[15\]]'
    '-w[Minimizer window size \[2/3 of k-mer length\]. A minimizer is the smallest k-mer in a window of w con‐]'
    '-H[Use homopolymer-compressed (HPC) minimizers. An HPC sequence is constructed by contracting homopoly‐]'
    '-I[Load at most NUM target bases into RAM for indexing \[4G\]. If there are more than NUM bases  in  tar‐]'
    '--idx-no-seq[Don'\''t	store  target  sequences in the index. It saves disk space and memory but the index generated]'
    '-d[Save the minimizer index of target.fa to FILE \[no dump\]. Minimap2 indexing is fast. It can index the]'
    '--alt[List of ALT contigs \[null\]]'
    '--alt-drop[Drop ALT hits by FLOAT fraction when ranking and computing mapping quality \[0.15\]]'
    '-f[If fraction, ignore top FLOAT fraction of most frequent minimizers \[0.0002\]. If integer, ignore min‐]'
    '-f[If fraction, ignore top FLOAT fraction of most frequent minimizers \[0.0002\]. If integer, ignore min‐]'
    '--min-occ-floor[Force	minimap2  to always use k-mers occurring INT times or less \[0\]. In effect, the max occurrence]'
    '-g[Stop chain enlongation if there are no minimizers within INT-bp \[10000\].]'
    '-r[Bandwidth used in chaining and DP-based alignment \[500\]. This option approximately controls the max‐]'
    '-n[Discard chains consisting of <INT number of minimizers \[3\]]'
    '-m[Discard chains with chaining score <INT \[40\]. Chaining score equals the approximate number of match‐]'
    '-D[If query sequence name/length are identical to the target name/length, ignore diagonal anchors. This]'
    '-P[Retain  all  chains  and  don'\''t attempt to set primary chains. Options -p and -N have no effect when]'
    '--dual[If no, skip query-target pairs wherein the query name is lexicographically greater than  the  target]'
    '-X[Equivalent to '\''-DP --dual=no --no-long-join'\''.	Primarily used for all-vs-all read overlapping.]'
    '-p[Minimal  secondary-to-primary	score  ratio  to output secondary mappings \[0.8\].  Between two chains]'
    '-N[Output at most INT secondary alignments \[5\]. This option has no effect when -X is applied.]'
    '-G[Maximum  gap  on  the	reference  (effective  with -xsplice/--splice).  This option also changes the]'
    '-F[Maximum fragment length (aka insert size; effective with -xsr/--frag=yes) \[800\]]'
    '-M[Mark  as  secondary  a chain that overlaps with a better chain by FLOAT or more of the shorter chain]'
    '--hard-mask-level[Honor option -M and disable a heurstic to save unmapped subsequences and disables --mask-len.]'
    '--mask-len[Keep an alignment if dropping it leaves an unaligned region on query longer than INT  \[inf\].  Effec‐]'
    '--max-chain-skip[A  heuristics	that  stops  chaining early \[25\]. Minimap2 uses dynamic programming for chaining. The]'
    '--max-chain-iter[Check up to INT partial chains during chaining \[5000\]. This is a heuristic to avoid  quadratic  time]'
    '--chain-gap-scale[Scale of gap cost during chaining \[1.0\]]'
    '--no-long-join[Disable  the  long gap patching heuristic. When this option is applied, the maximum alignment gap is]'
    '--lj-min-ratio[Fraction of query sequence length required to bridge a long gap \[0.5\]. A smaller value helps to  re‐]'
    '--splice[Enable the splice alignment mode.]'
    '--sr[Enable  short-read  alignment heuristics. In the short-read mode, minimap2 applies a second round of]'
    '--split-prefix[Prefix to create temporary files. Typically used for a multi-part index.]'
    '--frag[Whether to enable the fragment mode \[no\]]'
    '--for-only[Only  map  to the forward strand of the reference sequences. For paired-end reads in the forward-re‐]'
    '--rev-only[Only map to the reverse complement strand of the reference sequences.]'
    '--heap-sort[If  yes,  sort anchors with heap merge, instead of radix sort. Heap merge is faster for short reads,]'
    '--no-pairing[Treat two reads in a pair as independent reads. The mate related fields in SAM  are  still  properly]'
    '-A[Matching score \[2\]]'
    '-B[Mismatching penalty \[4\]]'
    '-O[Gap open penalty \[4,24\]. If INT2 is not specified, it is set to INT1.]'
    '-O[Gap open penalty \[4,24\]. If INT2 is not specified, it is set to INT1.]'
    '-E[Gap  extension penalty \[2,1\]. A gap of length k costs min{O1+k*E1,O2+k*E2}.  In the splice mode, the]'
    '-E[Gap  extension penalty \[2,1\]. A gap of length k costs min{O1+k*E1,O2+k*E2}.  In the splice mode, the]'
    '-C[Cost for a non-canonical GT-AG splicing (effective with --splice) \[0\]]'
    '-z[Truncate an alignment if the running alignment score drops too quickly along the diagonal of the  DP]'
    '-z[Truncate an alignment if the running alignment score drops too quickly along the diagonal of the  DP]'
    '-s[Minimal  peak DP alignment score to output \[40\]. The peak score is computed from the final CIGAR. It]'
    '-u[How to find canonical splicing sites GT-AG - f: transcript strand; b: both strands; n: no attempt to]'
    '--end-bonus[Score bonus when alignment extends to the end of the query sequence \[0\].]'
    '--score-N[Score of a mismatch involving ambiguous bases \[1\].]'
    '--splice-flank[Assume the next base to a GT donor site tends to be A/G (91% in human and 92% in mouse) and the pre‐]'
    '--junc-bed[Gene  annotations in the BED12 format (aka 12-column BED), or intron positions in 5-column BED. With]'
    '--junc-bonus[Score bonus for a splice donor or acceptor found in annotation (effective with --junc-bed) \[0\].]'
    '--end-seed-pen[Drop a terminal anchor if s<log(g)+INT, where s is the local alignment score around the anchor and g]'
    '--no-end-flt[Don'\''t filter seeds towards the ends of chains before performing base-level alignment.]'
    '--cap-sw-mem[Skip alignment if the DP matrix size is above NUM.  Set 0 to disable \[0\].]'
    '-a[Generate CIGAR and output alignments in the SAM format. Minimap2 outputs in PAF by default.]'
    '-o[Output alignments to FILE \[stdout\].]'
    '-Q[Ignore base quality in the input file.]'
    '-L[Write	CIGAR  with >65535 operators at the CG tag. Older tools are unable to convert alignments with]'
    '-R[SAM read group line in a format like @RG\tID:foo\tSM:bar \[\].]'
    '-y[Copy input FASTA/Q comments to output.]'
    '-c[Generate CIGAR. In PAF, the CIGAR is written to the `cg'\'' custom tag.]'
    '--cs[Output the cs tag.  STR can be either short or long.  If no STR is given, short is assumed. \[none\]]'
    '--cs[Output the cs tag.  STR can be either short or long.  If no STR is given, short is assumed. \[none\]]'
    '--MD[Output the MD tag (see the SAM spec).]'
    '--eqx[Output =/X CIGAR operators for sequence match/mismatch.]'
    '-Y[In SAM output, use soft clipping for supplementary alignments.]'
    '--seed[Integer  seed for randomizing equally best hits. Minimap2 hashes INT and read name when choosing be‐]'
    '-t[Number of threads \[3\]. Minimap2 uses at most three threads when indexing target sequences, and  uses]'
    '-2[Use two I/O threads during mapping. By default, minimap2 uses one I/O	thread.   When	I/O  is  slow]'
    '-K[Number  of  bases  loaded  into  memory  to  process  in a mini-batch \[500M\].	Similar to option -I,]'
    '--secondary[Whether to output secondary alignments \[yes\]]'
    '--max-qlen[Filter out query sequences longer than NUM.]'
    '--paf-no-hit[In  PAF,  output unmapped queries; the strand and the reference name fields are set to `*'\''. Warning:]'
    '--sam-hit-only[In SAM, don'\''t output unmapped reads.]'
    '-x[Preset \[\]. This option applies multiple options at the same time. It should be applied before	other]'
    '-ub[--junc-bonus=9 --splice-flank=yes).  In the splice mode, 1) long deletions are taken as]'
    '--no-kalloc[Use  the libc default allocator instead of the kalloc thread-local allocator.	This debugging option]'
    '--print-qname[Print query names to stderr, mostly to see which query is crashing minimap2.]'
    '--print-seeds[Print seed positions to stderr, for debugging only.]'
)

_arguments $args
